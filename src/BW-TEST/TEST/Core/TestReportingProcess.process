<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:regex="java://com.hp.labs.tibco.bw.regex.RegexMatch" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx2="http://www.nicosommi.com/labs/test/TESTTypes" xmlns:pfx="http://www.nicosommi.com/labs/test/xunit">
    <xsd:import namespace="http://www.nicosommi.com/labs/test/TESTTypes" schemaLocation="/TEST/Resources/Schemas/TESTTypes.xsd"/>
    <xsd:import namespace="http://www.nicosommi.com/labs/test/xunit" schemaLocation="/TEST/Resources/Schemas/xunit.xsd"/>
    <pd:name>TEST/Core/TestReportingProcess.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="html" type="xsd:boolean"/>
                    <xsd:element ref="pfx:testsuites"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>77</pd:startX>
    <pd:startY>84</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:choose>
                <xsl:when test="string($Start/root/html)=string(true())">
                    <outputString>
                        <xsl:value-of select="$Transform-XML/xmlString"/>
                    </outputString>
                </xsl:when>
                <xsl:otherwise>
                    <outputString>
                        <xsl:value-of select="tib:render-xml($Map-Data/testsuites)"/>
                    </outputString>
                </xsl:otherwise>
            </xsl:choose>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="outputString" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>492</pd:endX>
    <pd:endY>84</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1376336806952</pd:targetNamespace>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>248</pd:x>
        <pd:y>84</pd:y>
        <config>
            <element>
                <xsd:element name="testsuites">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="testsuite" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="testcase" minOccurs="0" maxOccurs="unbounded">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="error" minOccurs="0">
                                                        <xsd:complexType>
                                                            <xsd:sequence/>
                                                            <xsd:attribute name="message" type="xsd:string"/>
                                                            <xsd:attribute name="type" type="xsd:string" use="required"/>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                    <xsd:element name="failure" minOccurs="0">
                                                        <xsd:complexType>
                                                            <xsd:sequence/>
                                                            <xsd:attribute name="message" type="xsd:string"/>
                                                            <xsd:attribute name="type" type="xsd:string" use="required"/>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                    <xsd:element name="skipped" minOccurs="0">
                                                        <xsd:complexType>
                                                            <xsd:sequence/>
                                                            <xsd:attribute name="type" type="xsd:string" use="required"/>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                </xsd:sequence>
                                                <xsd:attribute name="name" type="xsd:string" use="required"/>
                                                <xsd:attribute name="classname" type="xsd:string" use="required"/>
                                                <xsd:attribute name="time" type="xsd:double" use="required"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                                    <xsd:attribute name="timestamp" type="xsd:dateTime" use="required"/>
                                    <xsd:attribute name="hostname" type="xsd:string" use="required"/>
                                    <xsd:attribute name="tests" type="xsd:int" use="required"/>
                                    <xsd:attribute name="failures" type="xsd:int" use="required"/>
                                    <xsd:attribute name="errors" type="xsd:int" use="required"/>
                                    <xsd:attribute name="skipped" type="xsd:int"/>
                                    <xsd:attribute name="time" type="xsd:double" use="required"/>
                                    <xsd:attribute name="package" type="xsd:string" use="required"/>
                                    <xsd:attribute name="id" type="xsd:int" use="required"/>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                        <xsd:attribute name="name" type="xsd:string" use="required"/>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <testsuites>
                <xsl:attribute name="name">
                    <xsl:value-of select="'Report powered by BW-TEST'"/>
                </xsl:attribute>
                <xsl:for-each select="$Start/root/pfx:testsuites/pfx:testsuite">
                    <testsuite>
                        <xsl:attribute name="name">
                            <xsl:value-of select="@name"/>
                        </xsl:attribute>
                        <xsl:attribute name="timestamp">
                            <xsl:value-of select="@timestamp"/>
                        </xsl:attribute>
                        <xsl:attribute name="tests">
                            <xsl:value-of select="@tests"/>
                        </xsl:attribute>
                        <xsl:attribute name="failures">
                            <xsl:value-of select="@failures"/>
                        </xsl:attribute>
                        <xsl:attribute name="errors">
                            <xsl:value-of select="@errors"/>
                        </xsl:attribute>
                        <xsl:if test="@skipped">
                            <xsl:attribute name="skipped">
                                <xsl:value-of select="@skipped"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:attribute name="time">
                            <xsl:value-of select="@time"/>
                        </xsl:attribute>
                        <xsl:attribute name="package">
                            <xsl:value-of select="@package"/>
                        </xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="@id"/>
                        </xsl:attribute>
                        <xsl:attribute name="hostname">
                            <xsl:value-of select="@hostname"/>
                        </xsl:attribute>
                        <xsl:for-each select="pfx:testcase">
                            <testcase>
                                <xsl:attribute name="name">
                                    <xsl:value-of select="@name"/>
                                </xsl:attribute>
                                <xsl:attribute name="classname">
                                    <xsl:value-of select="@classname"/>
                                </xsl:attribute>
                                <xsl:attribute name="time">
                                    <xsl:value-of select="@time"/>
                                </xsl:attribute>
                                <xsl:for-each select="pfx:error">
                                    <error>
                                        <xsl:if test="@message">
                                            <xsl:attribute name="message">
                                                <xsl:value-of select="@message"/>
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="@type"/>
                                        </xsl:attribute>
                                    </error>
                                </xsl:for-each>
                                <xsl:for-each select="pfx:failure">
                                    <failure>
                                        <xsl:if test="@message">
                                            <xsl:attribute name="message">
                                                <xsl:value-of select="@message"/>
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="@type"/>
                                        </xsl:attribute>
                                    </failure>
                                </xsl:for-each>
                                <xsl:for-each select="pfx:skipped">
                                    <skipped>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="@type"/>
                                        </xsl:attribute>
                                    </skipped>
                                </xsl:for-each>
                            </testcase>
                        </xsl:for-each>
                    </testsuite>
                </xsl:for-each>
            </testsuites>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Transform XML">
        <pd:type>com.tibco.plugin.xml.XMLTransformActivity</pd:type>
        <pd:resourceType>ae.activities.XMLTransformActivity</pd:resourceType>
        <pd:x>363</pd:x>
        <pd:y>169</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <engine>TibcoXML</engine>
            <stylesheet>/TEST/Resources/XSLT/XUnitToHtml.xslt</stylesheet>
        </config>
        <pd:inputBindings>
            <textInput>
                <xmlString>
                    <xsl:value-of select="tib:render-xml($Map-Data/testsuites)"/>
                </xmlString>
            </textInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>Transform XML</pd:to>
        <pd:xpathDescription>html?</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string($Start/root/html)=string(true())</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Transform XML</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>